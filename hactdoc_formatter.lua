--!
--! HactDoc - Default formatter module
--! ==================================
--!
--! This is the default formatter, which works for most HactDoc parsers.
--!

local formatter = {}


--!
--! Get a string a given amount of times.
--!
--! :param string:  The string to concatenate.
--! :param amount:  The amount of copies to concatenate.
--!
--! :returns: The concatenated string.
--!
local function GetString(string, amount)
    if amount <= 0 then
        return ""
    end
    
    return string .. GetString(string, amount - 1)
end


local function Indent(level, string)
    return GetString("    ", level) .. string
end


--!
--! Format an documentation object into a documentation string.
--!
--! :param object:       The documentation object to format.
--! :param domain:       The Sphinx domain.
--! :param indentLevel:  Level to indent to (for recursive calls).
--!
--! :returns: The formatted documentation string.
--!
function formatter.Format(object, domain, indentLevel)
    -- Indent level defaults to 0
    indentLevel = indentLevel or -1
    
    -- Individual documentation chunks (concatenated into one string)
    local doc = {}
    
    if indentLevel == -1 then
        -- Format the title
        local title = object.identifier or "MISSING IDENTIFIER"
        doc[#doc + 1] = title .. "\n"
                        .. GetString("=", #title) .. "\n"
        
        -- Comment with generation info
        doc[#doc + 1] = "..  \n"
                        .. "    Documentation generated by HactDoc.\n"
                        .. "    \n"
                        .. "    domain:           " .. tostring(domain) .. "\n"
                        .. "    identifier:       " .. tostring(object.identifier) .. "\n"
                        .. "    signatureMinimal: " .. tostring(object.signatureMinimal) .. "\n"
                        .. "    description:      " .. tostring(object.description) .. "\n"
                        .. "\n"
        
        if domain then
            doc[#doc + 1] = ".. default-domain:: " .. domain .. "\n\n"
        end
        
        indentLevel = 0
    end
    
    -- Format the object directive
    if object.type then
        -- The object's type is used as the directive's name
        local directive = ".. " .. object.type .. ":: "
        
        -- The amount of indentation required for a multiline directive
        local indent = Indent(indentLevel, GetString(" ", #directive))
        
        -- Replace line changes in the signature to support multiline signatures
        local signature = object.signature:gsub("\n", " \\\n" .. indent)
        
        -- Add the directive
        doc[#doc + 1] = Indent(indentLevel, directive .. signature) .. "\n"
    end
    
    -- NOTE: Sphinx doesn't allow content in the namespace directive
    if object.type ~= "namespace" then
        indentLevel = indentLevel + 1
    end
    
    if object.docstring and object.docstring ~= "" then
        -- Add the content
        local content = object.docstring:gsub(
            "\n",
            "\n" .. Indent(indentLevel, "")
        )
        
        doc[#doc + 1] = Indent(indentLevel, "\n")
                        .. Indent(indentLevel, content)
                        .. Indent(indentLevel, "\n")
                        .. Indent(indentLevel, "\n")
    end
    
    -- Iterate over the nodes children
    for _, child in ipairs(object) do
        doc[#doc + 1] = formatter.Format(child, domain, indentLevel)
                        .. Indent(indentLevel, "\n")
    end
    
    print("chunks: ", #doc)
    
    -- Concatenate the documentation chunks and return the documentation string
    return table.concat(doc, "")
end


return formatter
