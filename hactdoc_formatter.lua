--!
--! HactDoc - Default formatter module
--! ==================================
--!
--! This is the default formatter, which works for most HactDoc parsers.
--!

local formatter = {}


--!
--! Get a string a given amount of times.
--!
--! :param string:  The string to concatenate.
--! :param amount:  The amount of copies to concatenate.
--!
--! :returns: The concatenated string.
--!
local function GetString(string, amount)
    if amount <= 0 then
        return ""
    end
    
    return string .. GetString(string, amount - 1)
end


local function Indent(level, string)
    return GetString("    ", level) .. string
end


--!
--! Format an documentation object into a documentation string.
--!
--! :param object:       The documentation object to format.
--! :param domain:       The Sphinx domain.
--! :param indentLevel:  Level to indent to (for recursive calls).
--!
--! :returns: The formatted documentation string.
--!
function formatter.Format(object, domain, indentLevel)
    -- Indent level defaults to 0
    indentLevel = indentLevel or 0
    
    -- Individual documentation chunks (concatenated into one string)
    local doc = {}
    
    -- Comment with generation info
    doc[#doc + 1] = Indent(indentLevel, "..  \n")
                    .. Indent(indentLevel, "    Documentation generated by HactDoc.\n")
                    .. Indent(indentLevel, "    \n")
                    .. Indent(indentLevel, "    domain:           " .. tostring(domain) .. "\n")
                    .. Indent(indentLevel, "    identifier:       " .. tostring(object.identifier) .. "\n")
                    .. Indent(indentLevel, "    signatureMinimal: " .. tostring(object.signatureMinimal) .. "\n")
                    .. Indent(indentLevel, "    description:      " .. tostring(object.description) .. "\n")
                    .. Indent(indentLevel, "\n")
    
    if domain then
        doc[#doc + 1] = Indent(indentLevel, ".. default-domain:: " .. domain .. "\n\n")
    end
    
    -- Format the object
    --...
    
    -- Iterate over the nodes children
    for _, child in ipairs(object) do
        doc[#doc + 1] = formatter.Format(child, nil, indentLevel + 1)
    end
    
    print("chunks: ", #doc)
    
    -- Concatenate the documentation chunks and return the documentation string
    return table.concat(doc, "\n")
end


return formatter
